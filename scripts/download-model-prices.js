#!/usr/bin/env node

/**
 * Downloads the latest model‑pricing JSON from LiteLLM and
 * writes a TypeScript constant for use at runtime.
 */

import fs from "fs";
import path from "path";
import https from "https";
import { fileURLToPath } from "url";


const scriptDir = path.dirname(fileURLToPath(import.meta.url)); // "__dirname" equivalent


const MODEL_PRICES_URL =
  "https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json";
const OUTPUT_DIR = path.join(scriptDir, "../src/data");
const OUTPUT_FILE = path.join(OUTPUT_DIR, "model-prices.ts");

if (!fs.existsSync(OUTPUT_DIR)) {
  fs.mkdirSync(OUTPUT_DIR, { recursive: true });
}

console.log(`Downloading model prices from ${MODEL_PRICES_URL}…`);


function download(url){
  return new Promise((resolve, reject) => {
    https
      .get(url, (res) => {
        if (res.statusCode !== 200) {
          reject(
            new Error(`HTTP ${res.statusCode} ${res.statusMessage} while fetching ${url}`),
          );
          res.resume();
          return;
        }
        let data = "";
        res.on("data", (chunk) => (data += chunk));
        res.on("end", () => resolve(data));
      })
      .on("error", reject);
  });
}

(async () => {
  try {
    const jsonRaw = await download(MODEL_PRICES_URL);
    const modelPrices = JSON.parse(jsonRaw);

    const tsContent = `// Auto‑generated by scripts/download‑model‑prices.js\n// Do not edit manually — run the script instead.\n\nexport const modelPricesData = ${JSON.stringify(
      modelPrices,
      null,
      2,
    )} as const;\n`;

    fs.writeFileSync(OUTPUT_FILE, tsContent, "utf8");
    console.log(`Model prices saved to ${OUTPUT_FILE}`);

    // Sample output
    const examples = Object.keys(modelPrices).slice(0, 5);
    console.log("\nSample models:");
    examples.forEach((m) => {
      const p = modelPrices[m];
      console.log(
        `• ${m}: in $${p.input_cost_per_token * 1_000_000}/M, out $${p.output_cost_per_token * 1_000_000}/M`,
      );
    });
    if (Object.keys(modelPrices).length > 5) {
      console.log("…and more");
    }
  } catch (err) {
    console.error("Failed:", err);
    process.exit(1);
  }
})();

